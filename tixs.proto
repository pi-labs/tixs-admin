package telematik;

enum SyncSource {
    UNSYNCED = 1; /// No clock synchronization will be done, only time since startup is available
    GPS = 2; /// GPS fix time will be used for clock synchroniztion. Data without <synced_time> will be sent until fix is available.
    GSM = 3; /// GSM network time (if available) will be used for clock synchronization
    NTP = 4; /// Clock will be synchronized by using the Net Time Protocol. See parameter <ntpServer>
}

enum TransmissionReason {
  START_DRIVING = 1; /// First event after sleep mode or startup
  TIMED_EVENT = 2; /// All events between start and stop driving
  STOP_DRIVING = 3; /// Last event before going to sleep
}

/* 
  Message sent after startup (normally start of trip)
*/
message Startup {
  optional uint32 version = 1;    /// Software version
  required string imei = 2;     /// IMEI
  optional string longVersion = 3;  /// SW-Longversion - VARIANT.GITTAG.GITHASH
  optional string HwVersion = 4;  /// Hardware version - Board ID (e.g. tp1b)
  optional uint32 configVersion = 5; /// Config version of RemoteConfig
}

/**
  Message sent before shutdown
*/
message Shutdown {
  enum Reason {
      SLEEP_AFTER_IDLE = 0;     /// Sleep mode after maximum inactivity time (<inactivitySleepTimeoutSec>) is reached
      BATT_EMPTY = 1;       /// Battery is too empty to continue normal operation
      SLEEP_AFTER_12V_OFF = 2; /// Timer (<standbySleepTimeoutSec>) after 12V have been turned off has elapsed
      OTHER = 3;
    }
  required Reason reason = 1;
  optional string imei = 2;     // IMEI
}


/**
  The StateUpdate message is sent periodiacally during normal operation.
  The time between to messages can be configured by parameter stateUpdatePeriod.

  <b>Timestamps:</b><br/>
  The StateUpdate message itself has two timestamp fields, timestamp and synced_time:
  - "synced time" is the absolute time (GMT) in seconds since 1.1. 1970 (UNIX epoch)
  - "timestamp" are the milliseconds since system startup
  Both timestamps represent the same point in time, so for each other millisecond-timestamp, and unix timestamp can be calculated.

  <b>Positions:</b>
  There are two types of positions being transmitted:<br/>
  - FullPositions contain the complete position information<br/>
  - UpdatePositions only contain the difference to the last position (the last FullPosition or UpdatePosition with the last timestamp before the current position)<br/>
  <br/>
  The new position must be caculated by:
  new_lat = last_lat - (delta / 10^7)<br/>

    <b>Example:</b><br/>
    - FullPosition(lat=48.187893, long=11.589112, timestamp=1)<br/>
    - UpdatePosition(dlat=-70 , dlong=-2090, timestamp=2)<br/>
    - FullPosition(lat=48.187904, long=11.589511, timestamp=3)<br/>
    - UpdatePosition(dlat=0 , dlong=-2230, timestamp=4)<br/>
    - UpdatePosition(dlat=210 , dlong=-2360, timestamp=5)<br/>

    Result in:<br/>
    - 48.187893, 11.589112 <br/>
    - 448.187900, 11.589321 <br/>
    - 448.187904, 11.589511 <br/>
    - 448.187904, 11.589734 <br/>
    - 448.187883, 11.58997 <br/>

*/
message StateUpdate {
  message Acceleration {
    optional uint32 timestamp = 1; /// milliseconds since startup
    optional float accx = 2; /// acceleration in g, X-axis (m/s^2)
    optional float accy = 3; /// acceleration in g, Y-axis (m/s^2)
    optional float accz = 4; /// acceleration in g, Z-axis (m/s^2)
    //reserved 5 to 10; // was minx-minz, maxx-maxz
    optional uint32 confidence = 11;
  }


  message FullPosition {
    optional uint32 timestamp = 2; /// Milliseconds since startup
    optional float lat = 3; /// Latitude in WGS84 decimal degrees
    optional float long = 4; /// Longitude in WGS84 decimal degrees
    optional uint32 speed = 5; /// Vehicle speed in m/s
    optional uint32 heading = 6; /// Heading in degree
  }

  message UpdatePosition {
    optional uint32 timestamp = 1; /// Milliseconds since startup
    optional sint32 dlat =2; /// Calculated by: (last_lat-curr_lat)*10^7
    optional sint32 dlong =3; /// Calculated by: (last_long-curr_long)*10^7
    optional uint32 speed = 4; /// Vehicle speed in m/s
    optional uint32 heading = 5; /// Heading in degree
  }
  
  optional string imei = 1;
  repeated Acceleration acceleration = 2;
  repeated FullPosition fullPosition = 3;
  repeated UpdatePosition updatePosition = 4;
  optional uint64 synced_time = 5; /// Unix epoch
  optional uint32 timestamp = 6; /// Milliseconds since startup
  optional SyncSource syncSource = 7;
  repeated SystemState systemState = 8;
  optional TransmissionReason transmissionReason = 9;

}

message SystemState{
  enum PowerSupply {
      EXTERNAL = 0; /// Device powered by vehicle
      BACKUP_BATTERY = 1; /// Device powered by internal battery
    }
    enum CalibrationState {
      ACTIVE = 1; /// Device is evaluation its 3D orientation. Sent acceleration values are uncalibrated values
      COMPLETED = 2; /// Evaluation comleted, sent acceleration values are calibrated according to vehicle axis
    }
    message GPSQuality{
    required uint32 numsat = 1; /// Number of satellites used for the fix. A value of 0 means no fix was possible.
    required uint32 hdop = 2; /// = HDOP * 100
    required uint32 vdop = 3; /// = VDOP * 100
  }

    optional PowerSupply powersupply = 1;
    optional uint32 voltage = 2; /// Voltage of the internal battery in decivolts
    optional CalibrationState calibrationState = 3;
    optional GPSQuality gpsQuality = 4;
    optional string imei = 5;
    optional uint32 timestamp = 6; /// Milliseconds since startup
    optional uint32 voltageVehicle = 7; /// Volatage of the vehicle electrical system
}

message ECall{
    enum Reason {
        BUTTON = 0; /// Manual Ecall was started by pressing the button
        AUTOMATIC = 1; /// Detected acceleration values triggered an ecall
    }

    message Position {
      optional uint64 synced_time = 2; /// UNIX epoche
      optional float lat = 3; /// Latitude in WGS84 decimal degrees
      optional float long = 4; /// Longitude in WGS84 decimal degrees
      optional uint32 speed = 5; /// Vehicle speed in m/s
      optional uint32 heading = 6; /// Heading in degree
    }

    message Acceleration {
        optional float accx = 2; /// acceleration in g, X-axis (m/s^2)
        optional float accy = 3; /// acceleration in g, Y-axis (m/s^2)
        optional float accz = 4; /// acceleration in g, Z-axis (m/s^2)
    }
    
    optional string imei = 1;
    optional Reason reason = 2;
    optional uint64 synced_time = 3; /// UNIX epoche
    // removed: optional Position position = 4;
    optional Acceleration acceleration = 5;
    repeated Position pearlchain = 6;
}

message SoftwareUpdate {
    optional string url = 1; /// Update file URL, beginning with http://
}

message Config {
    optional bool enableTransmitAcceleration = 2; /// If false, no acceleration values are transmitted in StateUpdate message
    optional bool enableTransmitGPS = 3; /// If false, no position values are transmitted in StateUpdate message
    optional string mqttServer = 4; /// Remote host or IP-Address of mqtt/tcp host
    optional uint32 mqttPort = 5; ///  TCP Port of mqtt/tcp host
    optional float batteryUndervoltageThreshold = 6; /// If internal battery voltage drops below this value, the device will be powered off
    optional float ecallAccelerationTriggerThreshold = 7; /// If the normalized acceleration exeeds this value, an ecall is triggered
    optional uint32 averageAccelerationWindow = 8;
    optional uint32 accelerometerRange = 9; /// Acceleratometer sensitivity: 2, 4, 8 or 16g
    optional float activityWakeupThreshold = 10; /// An acceleration above this value will wakeup the device from sleep
    optional bool enableInactivityDetection = 11; /// If true, the device will sleep if no acceleration above inactivityDetectionThreshold was detected for a specific amount of time configured by inactivitySleepTimeoutSec
    optional float inactivityDetectionThreshold = 12; /// Threshold for InactivityDetection
    optional string ecallBcallSmsNumber = 13; /// SMS destination number for manual and automatic ecall messages
    optional SyncSource timeSyncSource = 14; /// Configures from which clock source the device clock will be synced
    optional string ntpServer = 15; /// NTP server name or IP-Address
    optional uint32 configVersion = 16;
    optional uint32 inactivitySleepTimeoutSec = 17; /// Timeout in seconds for enableInactivityDetection
    optional uint32 standbySleepTimeoutSec = 18; /// Time to wait in seconds before going to sleep after vehicle power supply was interrupted
    optional string secondaryEcallBcallSmsNumber = 19; /// Fallback SMS destination number for manual and automatic ecall messages
    optional uint32 stateUpdatePeriod = 20; /// Maximum number of seconds to wait before sending a StateUpdate message
    optional uint32 accSendThresholdPercent = 21; /// A new accleration value will only be sent if the value of one axis changed by at least <accSendThresholdPercent> percent
    optional bool enableTransmitUpdatePosition = 22; /// If disabled, only FullPositions are sent in StateUpdate message
    optional EnumAGPSConfig agpsConfig = 23;
    optional float gpsFilterMinAccuracyM = 24; /// If this value is > 0, positions will only be sent to the backend if an the error between the current one and the one that can be calculated in the backend exeeds this value in meters. 
    optional bool enableBCall = 25;
    optional bool enableECall = 26;

    enum EnumAGPSConfig {
      DISABLED = 0;
      ALWAYS = 1;
    }
}

message Debug {
  optional string message = 1;
  optional bytes data = 2;
}
